---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jow.hou.
--- DateTime: 2019/4/24 8:46
---to state a class
---在这里lua的table并不能够成为父类 因为很明显看一看出它是没有ctor的
local tableStr = "table"
local functionStr = "function"

---@param className string
---@param super table|function @这个函数一般是创建对象实例的
---@return cls
function class(className, super)
    local superType = type(super)
    ---@class cls
    ---@field __create function
    ---@field __cname string
    ---@field __ctype number
    local cls

    --如果父类即不是table也不是函数，说明父类为空
    if superType ~= functionStr and superType ~= tableStr then
        superType = nil
        super = nil
    end

    --父类是函数或者__ctype为1的表，这里应该是一个c++对象，它具有create方法这个方法一般返回的都是一个实例,调用的c++层的方法create
    --[[
        function(filename)
            return cc.Sprite:create(filename)
        end
    --]]
    if superType == functionStr or (super and super.__ctype == 1) then
        --已经具有ctor函数以及__create函数
        cls = {}

        if superType == tableStr then
            for i, v in pairs(super) do
                cls[i] = v
            end
            cls.super = super
        else
            cls.__create = super
            cls.ctor = function()
            end
        end
        local __create = cls.__create
        cls.__cname = className
        cls.__ctype = 1
        function cls.new(...)
            ---@type  cls
            local instance = __create(...)
            for k, v in pairs(cls) do
                instance[k] = v
            end
            instance.class = cls
            instance:ctor(...)
            return instance
        end
    else
        if super then   --传统的lua table
            cls = {}
            setmetatable(cls, { __index = super }) --当在自己上面找不到的时候就去super里面找
            cls.super = super
        else
            cls = { ctor = function()
            end }
        end
        cls.__cname = className
        cls.__ctype = 2
        cls.__index = cls  -- cls作为元表，表能够索引到自己的属性
        function cls.new(...)
            ---@type  cls
            local instance = setmetatable({},cls)
            instance.class = cls
            instance:ctor(...)
            return instance
        end
    end
    return cls
end